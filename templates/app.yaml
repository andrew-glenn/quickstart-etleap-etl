AWSTemplateFormatVersion: "2010-09-09"

Description: "Spins up an EC2 instance for Etleap's app node"

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Type: String
  DeploymentId:
    Type: String
    Description: Deployment ID, provided by Etleap
  Subdomain:
    Type: String
    Default: dev.etleap.com
    Description: The subdomain etleap will be accessible from
  ImageId:
    Type: String
    Description: AMI to start the  instance with
  SubnetId:
    Type: String
    Description: Subnet to start the instance in
  EtleapAppRole:
    Type: String
  FirstName:
    Type: String
  LastName:
    Type: String
  Email:
    Type: String
  SetupPassword:
    Type: String
  KMSKey:
    Type: String
  VpcCidrBlock1:
    Type: String
  VpcCidrBlock2:
    Type: String
  EtleapDBSecurityGroup:
    Type: String
  EtleapInternalSecurityGroup:
    Type: String
  AllowedIPCidr:
    Type: String
  Route53Zone:
    Type: String
  ExternalZoneId:
    Type: String

Resources:
  EtleapApp:
    Type: "AWS::EC2::Instance"
    Properties:
      IamInstanceProfile: !Ref EtleapAppInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: "t3.large"
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref SubnetId
          GroupSet:
            - Ref: EtleapAppSecurityGroup
      Tags:
        - Key: Name
          Value: "Etleap App"
      UserData: !Base64
        "Fn::Sub":
          - |
            #cloud-config
            # -*- YAML -*-
            apt_upgrade: true
            locale: en_US.UTF-8

            write_files:
            - path: /home/ubuntu/.aws/config
              content: |
                [default]
                region = ${AWS::Region}
              owner: ubuntu:ubuntu
            - path: /root/.aws/config
              content: |
                [default]
                region = ${AWS::Region}
            - path: /home/ubuntu/ssl_certificate/ssl.pem
              content: |
                -----BEGIN CERTIFICATE-----
                MIIDEjCCAfoCCQCwU84b/lc2gjANBgkqhkiG9w0BAQsFADBLMQswCQYDVQQGEwJV
                UzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzEP
                MA0GA1UECgwGRXRsZWFwMB4XDTIwMDYwNTAxMDEzNVoXDTMwMDYwMzAxMDEzNVow
                SzELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNh
                biBGcmFuY2lzY28xDzANBgNVBAoMBkV0bGVhcDCCASIwDQYJKoZIhvcNAQEBBQAD
                ggEPADCCAQoCggEBANbRtGKkwUY0LJ32u1p/lm0FcUnzCFP00o8Y3X10rB9j0kPF
                daKd+o1dIAfrD9FPjG/cZCRY0A2jGhngp/zQ9j8zMF0mUJX1q2Ub8yD6dDUL9KRW
                T3Zhr5h35T4FFcF6W/iiFT0L11xdSP6nsQFsKXan1ewp/RRCzXIx2mOyiQ7EkeaR
                k8meEQXWygk4y1ivfMrZdJQa8EnzMHrnPnSr/8HZB0DAjhXi+H4XcOgsVD8Fjbcj
                0BRk12YP278lcygekVYndr9YTvphKBBlTeVPqSrWzFIJV7e/9PR9NGyOga2A6dQ2
                ZGvvLZ0KK9ivAh7Hxatk+TjxFtvqWKKORAR19c8CAwEAATANBgkqhkiG9w0BAQsF
                AAOCAQEABaGzI5PVlrIkG/RVY/5IQYKN6Wm09FhDA6ocFCDKW0C9lf28GSximxEW
                KTH/DB/FyTK19y7UygM4Qw9eknFT7oNlZABd4fvBjBHwxfNNd53IOaEVn56As8jv
                g2jExvgv7/i62K2KE1zXI0P8SoOLyWXiYlo2uvyLzv21dNBWRAyOd9cpNndq7YsK
                qqWW0jUyL1dpytJ4Czw8O+1UiAP3oK61k1hepZMPtrdKUZIbhGNnoCiZrfkb715Q
                c04YhqhUzaCmm+Ui1KxJfGrheLNind0YV3udwdMAHVQninKvTCC0Rp5SwrwvC72x
                IdrMAzUSKCQ8sKWUzcq8ddquBFP9nA==
                -----END CERTIFICATE-----
              owner: ubuntu:ubuntu
            - path: /home/ubuntu/db-init.sh
              content: |
                #!/bin/bash -e

                DB_ROOT_PASSWORD=$1
                ETLEAP_DB_PASSWORD=$2
                SALESFORCE_DB_PASSWORD=$3
                ORG_NAME=$4

                mysql -hdbprod.etleap.internal -uroot -p$DB_ROOT_PASSWORD <<EOF
                CREATE DATABASE IF NOT EXISTS etleap;
                GRANT ALL PRIVILEGES ON etleap.* TO 'etleap-prod'@'%' IDENTIFIED BY "$ETLEAP_DB_PASSWORD";

                CREATE DATABASE IF NOT EXISTS salesforce;
                USE salesforce;
                GRANT ALL PRIVILEGES ON salesforce.* TO 'salesforce'@'%' IDENTIFIED BY "$SALESFORCE_DB_PASSWORD";
                CREATE TABLE IF NOT EXISTS jobs (id bigint(20) NOT NULL AUTO_INCREMENT,
                  user_hash varchar(64) NOT NULL,
                  job_id varchar(64) NOT NULL,
                  first_batch_id varchar(64),
                  query_hash varchar(64) NOT NULL,
                  bulk_api_calls int(11) NOT NULL,
                  failed tinyint(1) NOT NULL DEFAULT 0,
                  create_date datetime NOT NULL,
                  PRIMARY KEY (id),
                  UNIQUE KEY (user_hash, job_id),
                  INDEX user_hash_create_date (user_hash, create_date)
                ) ENGINE=InnoDB;

                FLUSH PRIVILEGES;

                EOF

                exit 0
              owner: ubuntu:ubuntu
              permissions: "0755"
            - path: /home/ubuntu/.etleap
              content: |
                export CUSTOMER_VPC=1
                export ETLEAP_DEPLOYMENT_ID=${DeploymentId}
                export USE_PROD_SECRETS=0
                export JOB_ROLE=customer_job,monitor
                export ETLEAP_DB_PASSWORD="$(aws secretsmanager get-secret-value --secret-id ${EtleapDBPassword} | jq -r .SecretString)"
                export SALESFORCE_DB_PASSWORD="$(aws secretsmanager get-secret-value --secret-id ${EtleapDBSalesforcePassword} | jq -r .SecretString)"
                export ETLEAP_HOSTS_ALLOWED=".${Subdomain}"
                export FRONT_END_HOSTNAME="app.${Subdomain}"
                export ETLEAP_FRONT_END_URL="https://$FRONT_END_HOSTNAME/"
                export ETLEAP_CORS_ALLOWED_ORIGINS="https://app.${Subdomain}"
                export API_HOSTNAME="app.${Subdomain}"
                export API_URL="https://$API_HOSTNAME/"
                export ETLEAP_BASE_URL=$API_URL
                export ETLEAP_CONF_FILE=/opt/etleap/prod-customervpc.conf
                export ETLEAP_HTTP_SESSION_DOMAIN="app.${Subdomain}"
                export ETLEAP_KMS_KEY_VIRGINIA="${KMSKey}"
                export ETLEAP_SETUP_FIRST_NAME="${FirstName}"
                export ETLEAP_SETUP_LAST_NAME="${LastName}"
                export ETLEAP_SETUP_EMAIL="${Email}"
                export ETLEAP_SETUP_PASSWORD="${EtleapSetupPassword}"
                export ETLEAP_SETUP_ADMIN_PASSWORD="$(aws secretsmanager get-secret-value --secret-id ${EtleapAdminPassword} | jq -r .SecretString)"
                export ETLEAP_SETUP_INTERMEDIATE_BUCKET=${S3IntermediateBucket}
                export ETLEAP_SETUP_INTERMEDIATE_ROLE_ARN="${S3IntermediateRole}"
                export ENABLE_YSJES='true'
              owner: ubuntu:ubuntu
            
            runcmd:
            - aws configure set region `curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region`
            - aws secretsmanager get-secret-value --secret-id ${SelfSignedCertKey} | jq -r .SecretString > /home/ubuntu/ssl_certificate/ssl.key && chown ubuntu:ubuntu /home/ubuntu/ssl_certificate/ssl.key
            - 'sed -i ''s/"dns": \[".*"\]/"dns": ["${VpcCidrBlock1}.${VpcCidrBlock2}.0.2"]/g'' /etc/docker/daemon.json'
            - service docker restart
            - /home/ubuntu/db-init.sh $(aws secretsmanager get-secret-value --secret-id ${RootDBPassword} | jq -r .SecretString) $(aws secretsmanager get-secret-value --secret-id ${EtleapDBPassword} | jq -r .SecretString) $(aws secretsmanager get-secret-value --secret-id ${EtleapDBSalesforcePassword} | jq -r .SecretString) ${DeploymentId}
            - yes | ssh-keygen -f /home/ubuntu/.ssh/id_rsa -N ''
            - cat /home/ubuntu/.ssh/id_rsa.pub >> /home/ubuntu/.ssh/authorized_keys
            - su ubuntu -c ". /home/ubuntu/.etleap && /home/ubuntu/cron-deploy-customervpc.sh"
          - RootDBPassword: EtleapDBRootPassword
            EtleapDBPassword: EtleapDBPassword
            EtleapDBSalesforcePassword: EtleapDBSalesforcePassword
            EtleapAdminPassword: EtleapAdminPassword
            EtleapSetupPassword: !Ref SetupPassword
            SelfSignedCertKey: SelfSignedCertificateKey
            S3IntermediateRole: !GetAtt S3IntermediateRole.Arn

  S3IntermediateBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub etleap-${DeploymentId}-intermediate

  S3IntermediateRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AWS::AccountId}:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": { "sts:ExternalId": "${DeploymentId}" }
              }
            }
          ]
        }
  
  S3IntermediatePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "EtleapIntermediate"
      PolicyDocument: !Sub | 
        {
          "Statement":[{
            "Effect":"Allow",
            "Action":[
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:DeleteObject"
            ],
            "Resource":[
              "arn:aws:s3:::${S3IntermediateBucket}",
              "arn:aws:s3:::${S3IntermediateBucket}/*"
            ]
          }]
        }
      Roles:
        - Ref: S3IntermediateRole  

  EtleapAppInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: 
        - !Ref EtleapAppRole

  EtleapAppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Etleap App Security Grooup"
      GroupName: Etleap App
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: Etleap App Security Group
  
  EtleapAppEgressSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      CidrIp: "0.0.0.0/0"
      FromPort: 0
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp
      ToPort: 65535

  EtleapAppDbSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      FromPort: 3306
      ToPort: 3306
      GroupId: !Ref EtleapDBSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EtleapAppSecurityGroup

  EtleapSSHSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      CidrIp: !Ref AllowedIPCidr
      FromPort: 22
      ToPort: 22
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp
    
  EtleapSSLSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      CidrIp: !Ref AllowedIPCidr
      FromPort: 443
      ToPort: 443
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp
    
  EtleapYSJESRestSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      CidrIp: !Ref AllowedIPCidr
      FromPort: 8080
      ToPort: 8080
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp
  
  EtleapYSJESHealthCheckSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      CidrIp: !Ref AllowedIPCidr
      FromPort: 8081
      ToPort: 8081
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp
  
  EtleapInternalAppSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref EtleapAppSecurityGroup
      SourceSecurityGroupId: !Ref EtleapInternalSecurityGroup
  
  EtleapAppInternalSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref EtleapInternalSecurityGroup
      SourceSecurityGroupId: !Ref EtleapAppSecurityGroup
  
  EtleapAppRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId: !Ref Route53Zone
      Name: "app.etleap.internal."
      ResourceRecords:
        - !GetAtt EtleapApp.PrivateDnsName
      TTL: 5
      Type: "CNAME"
  
  EtleapPublicAppRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId: !Ref ExternalZoneId
      Name: !Sub "app.${Subdomain}"
      ResourceRecords:
        - !GetAtt EtleapApp.PublicIp
      TTL: 5
      Type: 'A'

Outputs:
  EtleapAppIpAddres:
    Value: !GetAtt EtleapApp.PublicIp

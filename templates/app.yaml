AWSTemplateFormatVersion: "2010-09-09"

Description: "Creates the resources needed for Etleap's app node(s)"

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Type: String
  DeploymentId:
    Type: String
  UserSpecifiedDeploymentSecret:
    Type: String
  ImageId:
    Type: String
  SubnetAId:
    Type: String
  SubnetBId:
    Type: String
  EtleapAppRole:
    Type: String
  FirstName:
    Type: String
  LastName:
    Type: String
  Email:
    Type: String
  SetupPassword:
    Type: String
  KMSKey:
    Type: String
  EtleapDBSecurityGroup:
    Type: String
  EtleapDBRootPassword:
    Type: String
  EtleapInternalSecurityGroup:
    Type: String
  AllowedIPCidr:
    Type: String
  DeploymentOption:
    Type: String
  QSS3BucketName:
    Type: String
  QSS3BucketRegion:
    Type: String
  QSS3KeyPrefix:
    Type: String
  EMRHostname:
    Type: String
  RDSHostname:
    Type: String
  MarketplacePurchase:
    Type: String

Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, "aws-quickstart"]
  IsHighAvailability: !Equals [!Ref DeploymentOption, "High Availability"]
  IsRegularAvailability: !Not [Condition: IsHighAvailability]
  GenerateNewDeploymentSecret: !Equals [!Ref UserSpecifiedDeploymentSecret, ""]

Resources:
  EtleapDBPassword:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Join ["-", [EtleapDBPassword, !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]]]
      GenerateSecretString:
        ExcludePunctuation: true
        PasswordLength: 20
  
  EtleapDBSalesforcePassword:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Join ["-", [EtleapDBSalesforcePassword, !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]]]
      GenerateSecretString:
        ExcludePunctuation: true
        PasswordLength: 20

  EtleapAdminPassword:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Join ["-", [EtleapAdminPassword, !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]]]
      GenerateSecretString:
        ExcludePunctuation: true
        PasswordLength: 20

  GeneratedDeploymentSecret:
    Condition: GenerateNewDeploymentSecret
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: "Retain"
    Properties:
      Name: !Join ["-", [EtleapDeploymentSecret, !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]]]
      GenerateSecretString:
        ExcludePunctuation: true
        PasswordLength: 40

  EtleapAppB:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        InstanceName: "Etleap App B"
        DeploymentRole: customervpc
        DeploymentId: !Ref DeploymentId
        DeploymentSecret: !If [GenerateNewDeploymentSecret, !Ref GeneratedDeploymentSecret, !Ref UserSpecifiedDeploymentSecret]
        InstanceProfile: !Ref EtleapAppInstanceProfile
        ImageId: !Ref ImageId
        KeyPairName: !Ref KeyPairName
        SubnetId: !Ref SubnetBId
        SecurityGroup: !Ref EtleapAppSecurityGroup
        EtleapDBRootPassword: !Ref EtleapDBRootPassword
        EtleapDBPassword: !Ref EtleapDBPassword
        EtleapDBSalesforcePassword: !Ref EtleapDBSalesforcePassword
        EtleapAdminPassword: !Ref EtleapAdminPassword
        EtleapSetupPassword: !Ref SetupPassword
        SelfSignedCertKey: SelfSignedCertificateKey
        S3IntermediateBucket: !Ref S3IntermediateBucket
        S3IntermediateRole: !GetAtt S3IntermediateRole.Arn
        FirstName: !Ref FirstName
        LastName: !Ref LastName
        Email: !Ref Email
        SetupPassword: !Ref SetupPassword
        KMSKey: !Ref KMSKey
        EMRHostname: !Ref EMRHostname
        RDSHostname: !Ref RDSHostname
        PublicHostnameOrIp: !If [IsHighAvailability, !GetAtt EtleapLoadBalancer.DNSName, ""]
        MarketplacePurchase: !Ref MarketplacePurchase
      TemplateURL: 
        !Sub
          - "https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/app-instance.yaml"
          - S3Region: !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub "${QSS3BucketName}-${AWS::Region}", !Ref QSS3BucketName]

  EtleapAppA:
    Type: "AWS::CloudFormation::Stack"
    Condition: IsHighAvailability
    Properties:
      Parameters:
        InstanceName: "Etleap App A"
        DeploymentRole: customervpc_ha
        DeploymentId: !Ref DeploymentId
        DeploymentSecret: !If [GenerateNewDeploymentSecret, !Ref GeneratedDeploymentSecret, !Ref UserSpecifiedDeploymentSecret]
        InstanceProfile: !Ref EtleapAppInstanceProfile
        ImageId: !Ref ImageId
        KeyPairName: !Ref KeyPairName
        SubnetId: !Ref SubnetAId
        SecurityGroup: !Ref EtleapAppSecurityGroup
        EtleapRootDBPassword: !Ref EtleapDBRootPassword
        EtleapDBPassword: !Ref EtleapDBPassword
        EtleapDBSalesforcePassword: !Ref EtleapDBSalesforcePassword
        EtleapAdminPassword: !Ref EtleapAdminPassword
        EtleapSetupPassword: !Ref SetupPassword
        SelfSignedCertKey: SelfSignedCertificateKey
        S3IntermediateBucket: !Ref S3IntermediateBucket
        S3IntermediateRole: !GetAtt S3IntermediateRole.Arn
        FirstName: !Ref FirstName
        LastName: !Ref LastName
        Email: !Ref Email
        SetupPassword: !Ref SetupPassword
        KMSKey: !Ref KMSKey
        EMRHostname: !Ref EMRHostname
        RDSHostname: !Ref RDSHostname
        MasterAppPrivateIp: !GetAtt EtleapAppB.Outputs.PrivateIp
        PublicHostnameOrIp: !GetAtt EtleapLoadBalancer.DNSName
        MarketplacePurchase: !Ref MarketplacePurchase
      TemplateURL: 
        !Sub
          - "https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/app-instance.yaml"
          - S3Region: !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub "${QSS3BucketName}-${AWS::Region}", !Ref QSS3BucketName]

  S3IntermediateBucket:
    Type: "AWS::S3::Bucket"
    Properties:
#      BucketName: !Join ["-", [!Sub "etleap-${DeploymentId}-intermediate", !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]]]
      BucketName: !Sub "etleap-${DeploymentId}-intermediate"

  S3IntermediateRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::${AWS::AccountId}:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": { "sts:ExternalId": "${DeploymentId}" }
              }
            }
          ]
        }
  
  S3IntermediatePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "EtleapIntermediate"
      PolicyDocument: !Sub |
        {
          "Statement":[{
            "Effect":"Allow",
            "Action":[
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:DeleteObject"
            ],
            "Resource":[
              "arn:aws:s3:::${S3IntermediateBucket}",
              "arn:aws:s3:::${S3IntermediateBucket}/*"
            ]
          }]
        }
      Roles:
        - Ref: S3IntermediateRole  

  EtleapAppInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: 
        - !Ref EtleapAppRole

  EtleapAppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Etleap App Security Group"
      GroupName: Etleap App
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: Etleap App Security Group
  
  EtleapAppEgressSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      CidrIp: "0.0.0.0/0"
      FromPort: 0
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp
      ToPort: 65535

  EtleapAppDbSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      FromPort: 3306
      ToPort: 3306
      GroupId: !Ref EtleapDBSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EtleapAppSecurityGroup

  EtleapSSHSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      CidrIp: !Ref AllowedIPCidr
      FromPort: 22
      ToPort: 22
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp
    
  EtleapSSLSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      CidrIp: !Ref AllowedIPCidr
      FromPort: 443
      ToPort: 443
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp

  EtleapAppToAppSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Condition: IsHighAvailability
    Properties:
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EtleapAppSecurityGroup
    
  EtleapYSJESRestSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      CidrIp: !Ref AllowedIPCidr
      FromPort: 8080
      ToPort: 8080
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp
  
  EtleapYSJESHealthCheckSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      CidrIp: !Ref AllowedIPCidr
      FromPort: 8081
      ToPort: 8081
      GroupId: !Ref EtleapAppSecurityGroup
      IpProtocol: tcp
  
  EtleapInternalAppSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref EtleapAppSecurityGroup
      SourceSecurityGroupId: !Ref EtleapInternalSecurityGroup
  
  EtleapAppInternalSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref EtleapInternalSecurityGroup
      SourceSecurityGroupId: !Ref EtleapAppSecurityGroup

  EtleapLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: IsHighAvailability
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      Subnets: 
      - Ref: SubnetAId
      - Ref: SubnetBId
      SecurityGroups:
      - Ref: EtleapAppSecurityGroup
      Type: application

  EtleapAppTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: IsHighAvailability
    Properties:
      TargetType: instance
      VpcId: !Ref VpcId
      Port: 443
      Protocol: HTTPS
      Targets:
      - Id: !GetAtt EtleapAppB.Outputs.Instance
        Port: 443
      - Id: !GetAtt EtleapAppA.Outputs.Instance
        Port: 443
      Matcher:
        HttpCode: "200,400"
  
  EtleapAppLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: IsHighAvailability
    Properties:
      Certificates:
      - CertificateArn: "arn:aws:iam::959096951266:server-certificate/CFTest"
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref EtleapAppTargetGroup
      LoadBalancerArn: !Ref EtleapLoadBalancer
      Port: 443
      Protocol: HTTPS

Outputs:
  EtleapAppBIpAddres:
    Value: !GetAtt EtleapAppB.Outputs.PublicIp
  EtleapaAppAIpAdress:
    Condition: IsHighAvailability
    Value: !GetAtt EtleapAppA.Outputs.PublicIp
  Hostname:
    Value: !If [IsHighAvailability, !GetAtt EtleapLoadBalancer.DNSName, !GetAtt EtleapAppB.Outputs.PublicIp]
  DeploymentSecret:
    Value: !If [GenerateNewDeploymentSecret, !Ref GeneratedDeploymentSecret, !Ref UserSpecifiedDeploymentSecret]
